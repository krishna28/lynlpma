!function(){"use strict";angular.module("projectManagementApplicationApp",["appRoutes","authService","mainService","appController","trNgGrid"]).constant("config",{appName:"Project Management Application",apiUrl:"http://localhost:3000/",roles:{admin:"ROLE_ADMIN",user:"ROLE_USER"},contentTypeConfig:{headers:{"Content-Type":"application/x-www-form-urlencoded;charset=utf-8;"}}})}(),function(){"use strict";angular.module("appController",[]).controller("MainCtrl",["Auth","$rootScope","Notification","$state","config",function(a,b,c,d,e){var f=this;b.checkIfAdmin=!1,b.userName="",f.login=function(){return void 0==f.username||void 0==f.password?void c.error("Username and password is required"):void a.login(f.username,f.password).then(function(a){return void 0==a||401==a.status?void c.error("Invalid username and password!"):void(void 0!=a&&200==a.status&&(console.log("user data",a),b.userName=a.data.username,b.isUserLoggedIn=!0,angular.forEach(a.data.roles,function(a){a.toString()==e.roles.admin.toString()&&(b.checkIfAdmin=!0)}),d.go("dashboard",{checkIfAdmin:b.checkIfAdmin})))},function(a){c.error("Invalid username and password!")})},f.getProjects=function(){a.getProjects().then(function(a){},function(a){console.log(a)})},f.register=function(){a.register(f.name,f.username,f.password).then(function(a){console.log("REGISTERED",a),200==a.status&&(c.success("User created"),b.userName=a.data.username,b.isUserLoggedIn=!0,d.go("dashboard"))})}}]).controller("DashboardCtrl",["Auth","$rootScope","$scope","$state","$stateParams","MainService","Notification",function(a,b,c,d,e,f,g){var h=this;h.users=[],h.projectId=null,h.expiredProjects=[],h.newProjects=[],h.pending=[],h.newb=!0,e.id&&e.projectInstance&&(h.id=e.id,h.projectInstance=e.projectInstance),e.id&&!e.projectInstance&&f.getProject(e.id).then(function(a){h.id=e.id,h.projectInstance=a.data})["catch"](function(a){console.log(a)}),h.getProjects=function(){f.getProjects().then(function(a){console.log("the project data is ",a);var b=a.data,c=b.filter(function(a){return"NEW"==a.status}),d=b.filter(function(a){return"PENDING"==a.status}),e=b.filter(function(a){var b=new Date(a.created),c=new Date(b.setDate(b.getDate()+3)),d=new Date;return"PENDING"==a.status&&d>c});h.expiredProjects=e,h.newProjects=c,h.pending=d})},h.getProjects(),h.getUsers=function(){f.getUsers().then(function(a){angular.forEach(a.data,function(a,b){h.users.push({id:a._id,username:a.username,name:a.name})})})},h.getUsers(),h.createProject=function(){f.createProject(h.projectTitle,h.description).then(function(a){console.log(a),200==a.status&&(g.success("Project created! "),h.projectTitle="")},function(a){console.log(a)})},h.updateProject=function(){var a=[],b=h.projectInstance._id;void 0!=h.projectInstance.expertUser&&h.projectInstance.expertUser.forEach(function(b){a.push({expert:b,status:"NEW"})}),void 0!=h.projectInstance.experts&&h.projectInstance.experts.forEach(function(b){console.log("Expert",b),a.push({expert:b.expert._id,status:b.status})});var c={status:h.projectInstance.status,title:h.projectInstance.title,experts:a};f.updateProject(b,c).then(function(a){console.log(a),200==a.status&&(g.success("Updated"),h.getProjects())},function(a){console.log(a)})},h.logout=function(){a.logout(),d.go("/")}}]).controller("LogoutCtrl",["Auth","$rootScope",function(a,b){a.logout(),b.isUserLoggedIn=!1}]).directive("myModal",function(){return{restrict:"A",link:function(a,b,c){a.dismiss=function(){b.modal("hide")}}}}).filter("approvedExperts",function(){return function(a,b){if(Array.isArray(b.experts)){var c=b.experts.filter(function(a){return"APPROVED"==a.status}).map(function(a){return a.expert.name});return c.join(",")}}}).filter("trimed",function(){return function(a,b,c){return a.substring(0,c)}})}(),function(){"use strict";angular.module("appRoutes",["ui.router","ui-notification"]).config(["$stateProvider","$urlRouterProvider","NotificationProvider","$httpProvider",function(a,b,c,d){c.setOptions({delay:1e4,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"left",positionY:"bottom"}),a.state("home",{url:"/",templateUrl:"views/main.html",controller:"MainCtrl"}).state("login",{url:"/login",templateUrl:"views/login.html",controller:"MainCtrl"}).state("logout",{url:"/logout",templateUrl:"views/main.html",controller:"LogoutCtrl"}).state("register",{url:"/register",templateUrl:"views/register.html",controller:"MainCtrl"}).state("dashboard",{url:"/dashboard",params:{isAdmin:null},templateUrl:"views/dashboard.html",controller:"DashboardCtrl"}).state("dashboard.createProject",{url:"/createPost",templateUrl:"partials/createProject.html",controller:"DashboardCtrl"}).state("dashboard.viewProject",{url:"/viewPost",templateUrl:"partials/viewProject.html",controller:"DashboardCtrl"}).state("dashboard.project",{url:"/project/:id",params:{id:null,projectInstance:null},templateUrl:"partials/projectdetail.html",controller:"DashboardCtrl"}).state("dashboard.addComment",{url:"/addComment",params:{taskId:null,projectId:null},templateUrl:"partials/createComment.html",controller:"DashboardCtrl"}),console.log("default is called"),b.otherwise("/"),d.interceptors.push("AuthInterceptor")}]).run(["$state","$rootScope","Auth",function(a,b,c){b.$on("$stateChangeStart",function(d,e,f,g,h,i){console.log("State changes"),b.isUserLoggedIn=c.isLoggedIn(),"home"!==e.name&&"login"!==e.name&&"register"!==e.name&&(console.log("State changes outside",e.name),c.isLoggedIn()||"login"==e.name||(console.log("State changes isnde true"),d.preventDefault(),a.transitionTo("login",null,{notify:!1}),a.go("login")))})}])}(),function(){"use strict";angular.module("authService",[]).factory("Auth",["$http","$q","AuthToken","config",function(a,b,c,d){var e={};e.roles=[],e.isAdmin=!1;var f=d.apiUrl;return e.login=function(b,d){return a.post(f+"login",{username:b,password:d}).then(function(a){return 200==a.status&&c.setToken(a.data.token),a})["catch"](function(a){return a})},e.logout=function(){c.setToken()},e.register=function(b,d,e){var g=f+"signup";return a.post(g,{name:b,username:d,password:e}).then(function(a){return 200==a.status&&c.setToken(a.data.token),a})["catch"](function(a){return a})},e.isLoggedIn=function(){return c.getToken()?!0:!1},e.getProjects=function(d,e){return c.getToken()?a({method:"GET",url:f+"api/project",params:{offset:d,maxResultSet:e}}):b.reject({message:"User has no token"})},e}]).factory("AuthToken",["$window",function(a){var b={};return b.getToken=function(){return a.localStorage.getItem("token")},b.setToken=function(b){b?a.localStorage.setItem("token",b):a.localStorage.removeItem("token")},b}]).factory("AuthInterceptor",["$q","$location","AuthToken","$window",function(a,b,c,d){var e={};return e.request=function(a){var b=c.getToken();return b&&(a.headers["x-access-token"]=b),a},e.responseError=function(c){return console.log("error response",c),403==c.status&&(console.log("unauthorized error"),d.location="/403.html",a.reject(c)),401==c.status?a.reject(c):-1==c.status?a.reject(c):500==c.status?(b.path("/500.html"),a.reject(c)):void 0},e}])}(),function(){"use strict";angular.module("mainService",[]).factory("MainService",["$http","$q","AuthToken","config",function(a,b,c,d){var e={},f=d.apiUrl;return e.getUsers=function(){return a.get(f+"api/users",d.contentTypeConfig).then(function(a){return a})["catch"](function(a){return a})},e.getProjects=function(){var b=f.concat("api/project/");return a({method:"GET",url:b}).then(function(a){return a})["catch"](function(a){return a})},e.getProject=function(b){var c=f.concat("api/project/").concat(b);return console.log("url",c),a.get(c).then(function(a){return console.log("ss",a),a})["catch"](function(a){return a})},e.getTaskComments=function(b){var c=f.concat("api/project/").concat(b.projectId).concat("/task/").concat(b.taskId).concat("/comment");return a.put(c,b).then(function(a){return a})},e.createProject=function(b,c){return a.post(f+"api/project",{title:b}).then(function(a){return a})},e.updateProject=function(b,c){return a.put(f+"api/project/".concat(b),c).then(function(a){return a})},e.deleteProject=function(){},e.saveTask=function(b){var c=f.concat("api/project/").concat(b.projectId).concat("/task");return a.post(c,$.param(b),d.contentTypeConfig).then(function(a){return a})},e.deleteTask=function(b,c){var e=f.concat("api/project/").concat(b).concat("/task/").concat(c);return a["delete"](e,d.contentTypeConfig).then(function(a){return a})},e.updateTask=function(){},e.saveComment=function(b){var c=f.concat("api/project/").concat(b.projectId).concat("/task/").concat(b.taskId).concat("/comment");return a.post(c,$.param(b),d.contentTypeConfig).then(function(a){return a})},e.deleteComment=function(b){var c=f.concat("api/project/").concat(b.projectId).concat("/task/").concat(b.taskId).concat("/comment/").concat(b.commentId);return a["delete"](c,d.contentTypeConfig).then(function(a){return a})},e.updateComment=function(){},e}])}(),angular.module("projectManagementApplicationApp").run(["$templateCache",function(a){"use strict";a.put("views/dashboard.html",'<div ng-controller="DashboardCtrl as dashboardVm"> <div class="col-xs-3"> <ul class="list-group"> <li class="list-group-item"> <a ui-sref="dashboard.createProject">Create New Project</a> </li> <li class="list-group-item"> <a ui-sref="dashboard.viewProject">View Projects</a> </li> </ul> </div> <div class="col-xs-9"> <div ui-view></div> </div> </div>'),a.put("views/login.html",'<div class="container"> <div class="wrapper"> <form name="loginForm" method="post" name="Login_Form" class="form-signin"> <h3 class="form-signin-heading">Welcome Back! Please Sign In</h3> <hr class="colorgraph"><br> <input type="text" class="form-control" name="Username" placeholder="Username" ng-model="mainVm.username" required autofocus> <input type="password" class="form-control" name="Password" placeholder="Password" ng-model="mainVm.password" required> <button class="btn btn-lg btn-primary btn-block" name="Submit" value="Login" ng-click="mainVm.login()">Login</button> </form> </div> </div>'),a.put("views/main.html",'<div class="jumbotron"> <h1>Welcome to the project management application</h1> </div>'),a.put("views/register.html",'<div class="container"> <div class="wrapper"> <form name="registerForm" method="post" name="Login_Form" class="form-signin"> <h3 class="form-signin-heading">Please Register</h3> <hr class="colorgraph"><br> <input type="text" class="form-control" name="Name" placeholder="Name" ng-model="mainVm.name" required autofocus> <input type="text" class="form-control" name="Username" placeholder="Username" ng-model="mainVm.username" required autofocus> <input type="password" class="form-control" name="Password" placeholder="Password" ng-model="mainVm.password" required> <input type="password" class="form-control" name="confirmPassword" placeholder="Confirm Password" ng-model="mainVm.confirmPassword" required> <button id="registerBtn" class="btn btn-lg btn-primary btn-block" name="Submit" value="Login" ng-click="mainVm.register()">Register</button> </form> </div> </div>'),a.put("partials/createProject.html",'<div class="col-md-10"> <form> <fieldset class="form-group"> <label for="projectTitle" class="pull-left">Project Title</label> <input type="text" name="title" class="form-control" id="projectTitle" placeholder="Title" ng-model="dashboardVm.projectTitle"> </fieldset> <button type="submit" class="btn btn-primary" ng-click="dashboardVm.createProject()">Create</button> </form> </div>'),a.put("partials/projectdetail.html",'<div ng-controller="DashboardCtrl as dashboardVm"> <div class="row" id="projecdt" style="background-color: white;padding: 10px"> <div class="col-md-12"> <h3 style="display: inline-block">Project details</h3> <hr> <div> <form role="form" name="form1"> <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-12"> <label for="title">Title</label> <input type="text" class="form-control" name="title" class="form-control" id="projectTitle" placeholder="Title" ng-model="dashboardVm.projectInstance.title"> </div> <div class="form-group col-xs-12"> <label for="status">Status</label> <select class="form-control" id="status" ng-model="dashboardVm.projectInstance.status" name="status"> <option value="">Select Status</option> <option value="NEW">NEW</option> <option value="INPROGRESS">IN-PROGRESS</option> <option value="COMPLETE">COMPLETE</option> </select> </div> <div class="form-group col-xs-12"> <label for="status">Add Experts</label> <select class="form-control" multiple name="expert" ng-model="dashboardVm.projectInstance.expertUser" ng-options="item.id as item.name for item in dashboardVm.users"> </select> </div> <div class="form-group col-xs-12" ng-if="dashboardVm.projectInstance.experts.length > 0"> <table class="table table-bordered table-dark"> <thead> <tr> <th scope="col">Name</th> <th scope="col">Email</th> <th scope="col">Action</th> </tr> </thead> <tbody> <tr ng-repeat="row in dashboardVm.projectInstance.experts" ng-class="row.status == \'APPROVED\' ? \'alert alert-success\':\r\n                  (row.status == \'NEW\' ? \'alert alert-info\':\'alert alert-danger\')"> <td style="text-align: left">{{row.expert.name}}</td> <td style="text-align: left">{{row.expert.username}}</td> <td> <button type="button" ng-disabled="row.status == \'APPROVED\'" class="btn btn-primary btn-xs" ng-click="row.status = \'APPROVED\'">Approve</button> <button type="button" ng-click="row.status = \'REJECTED\'" ng-disabled="row.status == \'REJECTED\'" class="btn btn-danger btn-xs">Reject</button> </td> </tr> </tbody> </table> </div> <div class="col-xs-12"> <button type="button" class="btn btn-success" ng-click="dashboardVm.updateProject()">Update</button> <button class="btn btn-primary" type="button" type="button">Cancel</button> </div> </form> </div> </div> </div> <hr> </div>'),a.put("partials/viewProject.html",'<label class="checkbox-inline"><input type="checkbox" ng-model="dashboardVm.newb">View New</label> <label class="checkbox-inline"><input type="checkbox" ng-model="dashboardVm.pendingb">View Pending</label> <label class="checkbox-inline"><input type="checkbox" ng-model="dashboardVm.expiredb">View Expired</label> <table ng-if="dashboardVm.newb" tr-ng-grid="" items="dashboardVm.newProjects" fields="[\'title\',\'status\',\'created\',\'experts\']"> <thead> <tr> <th field-name="title" display-format="trimed:title:50"></th> <th field-name="status"></th> <th field-name="created"></th> <th field-name="experts" display-format="approvedExperts:gridItem"></th> </tr> </thead> <tbody> <tr> <td> <a ui-sref="dashboard.project({id:gridItem._id,projectInstance: gridItem})">Edit</a> </td> </tr> </tbody> </table> <table ng-if="dashboardVm.pendingb" tr-ng-grid="" items="dashboardVm.pending" fields="[\'title\',\'status\',\'created\',\'experts\']"> <thead> <tr> <th field-name="title" display-format="trimed:title:50"></th> <th field-name="status"></th> <th field-name="created"></th> <th field-name="experts" display-format="approvedExperts:gridItem"></th> </tr> </thead> <tbody> <tr> <td> <a ui-sref="dashboard.project({id:gridItem._id,projectInstance: gridItem})">Edit</a> </td> </tr> </tbody> </table> <table ng-if="dashboardVm.expiredb" tr-ng-grid="" items="dashboardVm.expiredProjects" fields="[\'title\',\'status\',\'created\',\'experts\']"> <thead> <tr> <th field-name="title" display-format="trimed:title:50"></th> <th field-name="status"></th> <th field-name="created"></th> <th field-name="experts" display-format="approvedExperts:gridItem"></th> </tr> </thead> <tbody> <tr> </tr> </tbody> </table>')}]);